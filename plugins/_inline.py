# Ultroid - UserBot
# Copyright (C) 2020 TeamUltroid
#
# This file is a part of < https://github.com/TeamUltroid/Ultroid/ >
# PLease read the GNU Affero General Public License in
# <https://www.github.com/TeamUltroid/Ultroid/blob/main/LICENSE/>.

import os
import random
import re
import time
from datetime import datetime
from math import ceil
from platform import python_version as pyver

from git import Repo
from support import *
from telethon import Button, __version__
from telethon.tl.types import InputWebDocument

from . import *

# ================================================#
notmine = "This bot is for {}".format(OWNER_NAME)
ULTROID_PIC = "https://telegra.ph/file/40a9824c3ba55ccfae9a0.jpg"
helps = """
[U ü·¥õ Ä·¥è…™·¥Ö S·¥ú·¥ò·¥ò·¥è Ä·¥õ](t.me/Movies_hubs_1)

**H·¥á ü·¥ò M·¥á…¥·¥ú O“ì {}.

P ü·¥ú…¢…™…¥s ~ {}**
"""


if Var.ADDONS:
    zhelps = """
[U ü·¥õ Ä·¥è…™·¥Ö S·¥ú·¥ò·¥ò·¥è Ä·¥õ](t.me/Movies_hubs_1)

**H·¥á ü·¥ò M·¥á…¥·¥ú O“ì {}.

A·¥Ö·¥Ö·¥è…¥s ~ {}**
"""
else:
    zhelps = """
[U ü·¥õ Ä·¥è…™·¥Ö S·¥ú·¥ò·¥ò·¥è Ä·¥õ](t.me/Movies_hubs_1)

**H·¥á ü·¥ò M·¥á…¥·¥ú O“ì {}.

A·¥Ö·¥Ö·¥è…¥s ~ {}

G·¥è A…¥·¥Ö A·¥Ö·¥Ö ADDON V·¥Ä Ä W…™·¥õ ú V·¥Ä ü·¥ú·¥á T Ä·¥ú·¥á**
"""
# ============================================#


@inline
@in_owner
async def e(o):
    if len(o.text) == 0:
        b = o.builder
        uptime = grt((time.time() - start_time))
        ALIVEMSG = """
**The Ultroid Userbot...**\n\n
‚úµ **Owner** - `{}`
‚úµ **UpTime** - `{}`
‚úµ **Python** - `{}`
‚úµ **Telethon** - `{}`
‚úµ **Branch** - `{}`
""".format(
            OWNER_NAME,
            uptime,
            pyver(),
            __version__,
            Repo(https://github.com/Khushmeet-op/Ultrabot).active_branch,
        )
        res = [
            b.article(
                title="Ultra Userbot",
                url="https://t.me/Movies_hubs_1",
                description="Userbot | Telethon ",
                text=ALIVEMSG,
                thumb=InputWebDocument(ULTROID_PIC, 0, "image/jpeg", []),
            )
        ]
        await o.answer(res, switch_pm=f"üë• ULTROID PORTAL", switch_pm_param="start")


if Var.BOT_USERNAME is not None and asst is not None:

    @inline
    @in_owner
    async def inline_handler(event):
        builder = event.builder
        result = None
        query = event.text
        if event.query.user_id in sed and query.startswith("ultd"):
            result = builder.article(
                title="Help Menu",
                description="Help Menu - UserBot | Telethon ",
                url="https://t.me/TheUltroid",
                thumb=InputWebDocument(ULTROID_PIC, 0, "image/jpeg", []),
                text=f"** B·¥è·¥õ O“ì {OWNER_NAME}\n\nM·¥Ä…™…¥ M·¥á…¥·¥ú\n\nP ü·¥ú…¢…™…¥s ~ {len(PLUGINS) - 4}\nA·¥Ö·¥Ö·¥è…¥s ~ {len(ADDONS)}**",
                buttons=[
                    [
                        Button.inline("‚Ä¢ P ü·¥ú…¢…™…¥s", data="hrrrr"),
                        Button.inline("‚Ä¢ A·¥Ö·¥Ö·¥è…¥s", data="frrr"),
                    ],
                    [Button.inline("O·¥°…¥·¥á Ä‚Ä¢·¥õ·¥è·¥è üÍú±", data="ownr")],
                    [Button.inline("I…¥ ü…™…¥·¥á‚Ä¢P ü·¥ú…¢…™…¥s", data="inlone")],
                    [Button.inline("‚Ä¢‚Ä¢C ü·¥èÍú±·¥á‚Ä¢‚Ä¢", data="close")],
                ],
            )
            await event.answer([result] if result else None)
        elif event.query.user_id in sed and query.startswith("paste"):
            ok = query.split("-")[1]
            link = f"https://nekobin.com/{ok}"
            link_raw = f"https://nekobin.com/raw/{ok}"
            result = builder.article(
                title="Paste",
                text="P·¥Äs·¥õ·¥á·¥Ö T·¥è N·¥á·¥ã·¥è ô…™…¥!",
                buttons=[
                    [
                        Button.url("NekoBin", url=f"{link}"),
                        Button.url("Raw", url=f"{link_raw}"),
                    ]
                ],
            )
            await event.answer([result] if result else None)

    @inline
    @in_owner
    @callback("ownr")
    @owner
    async def setting(event):
        await event.edit(
            buttons=[
                [
                    Button.inline("‚Ä¢P…™…¥…¢‚Ä¢", data="pkng"),
                    Button.inline("‚Ä¢U·¥ò·¥õ…™·¥ç·¥á‚Ä¢", data="upp"),
                ],
                [Button.inline("‚Ä¢R·¥ás·¥õ·¥Ä Ä·¥õ‚Ä¢", data="rstrt")],
                [Button.inline("<- B·¥Ä·¥Ñ·¥ã", data="open")],
            ],
        )

    @callback("pkng")
    async def _(event):
        start = datetime.now()
        end = datetime.now()
        ms = (end - start).microseconds / 1000
        pin = f"üåãP…™…¥…¢ = {ms}ms"
        await event.answer(pin, cache_time=0, alert=True)

    @callback("upp")
    async def _(event):
        uptime = grt((time.time() - start_time))
        pin = f"üôãU·¥ò·¥õ…™·¥ç·¥á = {uptime}"
        await event.answer(pin, cache_time=0, alert=True)

    @callback("inlone")
    @owner
    async def _(e):
        button = [
            [
                Button.switch_inline(
                    "S·¥á…¥·¥Ö O“ì“ì…™·¥Ñ…™·¥Ä ü P ü·¥ú…¢…™…¥s",
                    query="send all",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "P ü·¥Ä è S·¥õ·¥è Ä·¥á A·¥ò·¥òs",
                    query="app telegram",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "M·¥è·¥Ö·¥Ö·¥á·¥Ö A·¥ò·¥òs",
                    query="mods minecraft",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "S·¥á·¥Ä Ä·¥Ñ ú O…¥ G·¥è·¥è…¢ ü·¥á",
                    query="go TeamUltroid",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "S·¥á·¥Ä Ä·¥Ñ ú O…¥ Y·¥Ä ú·¥è·¥è",
                    query="yahoo TeamUltroid",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "Y·¥è·¥úT·¥ú ô·¥á D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä",
                    query="yt How to Deploy Ultroid Userbot",
                    same_peer=True,
                )
            ],
            [
                Button.switch_inline(
                    "C ü…™·¥òA Ä·¥õ S·¥á·¥Ä Ä·¥Ñ ú",
                    query="clipart frog",
                    same_peer=True,
                )
            ],
            [
                Button.inline(
                    "<- B·¥Ä·¥Ñ·¥ã",
                    data="open",
                )
            ],
        ]
        await e.edit(buttons=button, link_preview=False)

    @callback("hrrrr")
    @owner
    async def on_plug_in_callback_query_handler(event):
        xhelps = helps.format(OWNER_NAME, len(PLUGINS) - 4)
        buttons = paginate_help(0, PLUGINS, "helpme")
        await event.edit(f"{xhelps}", buttons=buttons, link_preview=False)

    @callback("frrr")
    @owner
    async def addon(event):
        halp = zhelps.format(OWNER_NAME, len(ADDONS))
        if len(ADDONS) > 0:
            buttons = paginate_addon(0, ADDONS, "addon")
            await event.edit(f"{halp}", buttons=buttons, link_preview=False)
        else:
            await event.answer(
                "‚Ä¢ I…¥s·¥õ·¥Ä ü ü A P ü·¥ú…¢…™…¥ M·¥Ä…¥·¥ú·¥Ä ü ü è O Ä A·¥Ö·¥Ö V·¥Ä Ä ADDON W…™·¥õ ú V·¥Ä ü·¥ú·¥á T Ä·¥ú·¥á",
                cache_time=0,
                alert=True,
                link_preview=False,
            )

    @callback("rstrt")
    @owner
    async def rrst(ult):
        await restart(ult)

    @callback(
        re.compile(
            rb"helpme_next\((.+?)\)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        current_page_number = int(event.data_match.group(1).decode("UTF-8"))
        buttons = paginate_help(current_page_number + 1, PLUGINS, "helpme")
        await event.edit(buttons=buttons, link_preview=False)

    @callback(
        re.compile(
            rb"helpme_prev\((.+?)\)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        current_page_number = int(event.data_match.group(1).decode("UTF-8"))
        buttons = paginate_help(current_page_number - 1, PLUGINS, "helpme")
        await event.edit(buttons=buttons, link_preview=False)

    @callback(
        re.compile(
            rb"addon_next\((.+?)\)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        current_page_number = int(event.data_match.group(1).decode("UTF-8"))
        buttons = paginate_addon(current_page_number + 1, ADDONS, "addon")
        await event.edit(buttons=buttons, link_preview=False)

    @callback(
        re.compile(
            rb"addon_prev\((.+?)\)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        current_page_number = int(event.data_match.group(1).decode("UTF-8"))
        buttons = paginate_addon(current_page_number - 1, ADDONS, "addon")
        await event.edit(buttons=buttons, link_preview=False)

    @callback("back")
    @owner
    async def backr(event):
        xhelps = helps.format(OWNER_NAME, len(PLUGINS) - 4)
        current_page_number = 0
        buttons = paginate_help(current_page_number, PLUGINS, "helpme")
        await event.edit(f"{xhelps}", buttons=buttons, link_preview=False)

    @callback("buck")
    @owner
    async def backr(event):
        xhelps = zhelps.format(OWNER_NAME, len(ADDONS))
        current_page_number = 0
        buttons = paginate_addon(current_page_number, ADDONS, "addon")
        await event.edit(f"{xhelps}", buttons=buttons, link_preview=False)

    @callback("open")
    @owner
    async def opner(event):
        buttons = [
            [
                Button.inline("‚Ä¢ P ü·¥ú…¢…™…¥s ", data="hrrrr"),
                Button.inline("‚Ä¢ A·¥Ö·¥Ö·¥è…¥s", data="frrr"),
            ],
            [Button.inline("O·¥°…¥·¥á Ä‚Ä¢T·¥è·¥è üÍú±", data="ownr")],
            [Button.inline("I…¥ ü…™…¥·¥á‚Ä¢P ü·¥ú…¢…™…¥s", data="inlone")],
            [Button.inline("‚Ä¢‚Ä¢C ü·¥èÍú±·¥á‚Ä¢‚Ä¢", data="close")],
        ]
        await event.edit(
            f"** B·¥è·¥õ O“ì {OWNER_NAME}\n\nM·¥Ä…™…¥ M·¥á…¥·¥ú\n\nOÍú∞Íú∞…™·¥Ñ…™·¥Ä ü P ü·¥ú…¢…™…¥s ~ {len(PLUGINS) - 4}\nU…¥·¥èÍú∞Íú∞…™·¥Ñ…™·¥Ä ü P ü·¥ú…¢…™…¥s ~ {len(ADDONS)}**",
            buttons=buttons,
            link_preview=False,
        )

    @callback("close")
    @owner
    async def on_plug_in_callback_query_handler(event):
        await event.edit(
            "**M·¥á…¥·¥ú H·¥Äs B·¥á·¥á…¥ C ü·¥ès·¥á·¥Ö**",
            buttons=Button.inline("O·¥ò·¥á…¥ M·¥Ä…™…¥ M·¥á…¥·¥ú A…¢·¥Ä…™…¥", data="open"),
        )

    @callback(
        re.compile(
            b"us_plugin_(.*)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        plugin_name = event.data_match.group(1).decode("UTF-8")
        help_string = f"Plugin Name - `{plugin_name}`\n"
        try:
            for i in HELP[plugin_name]:
                help_string += i
        except BaseException:
            pass
        if help_string == "":
            reply_pop_up_alert = "{} has no detailed help...".format(plugin_name)
        else:
            reply_pop_up_alert = help_string
        reply_pop_up_alert += "\n¬© @TheUltroid"
        try:
            if event.query.user_id in sed:
                await event.edit(
                    reply_pop_up_alert,
                    buttons=[
                        Button.inline("<- B·¥Ä·¥Ñ·¥ã", data="back"),
                        Button.inline("‚Ä¢‚Ä¢C ü·¥èÍú±·¥á‚Ä¢‚Ä¢", data="close"),
                    ],
                )
            else:
                reply_pop_up_alert = notmine
                await event.answer(reply_pop_up_alert, cache_time=0)
        except BaseException:
            halps = "Do .help {} to get the list of commands.".format(plugin_name)
            await event.edit(halps)

    @callback(
        re.compile(
            b"add_plugin_(.*)",
        ),
    )
    @owner
    async def on_plug_in_callback_query_handler(event):
        plugin_name = event.data_match.group(1).decode("UTF-8")
        help_string = ""
        try:
            for i in HELP[plugin_name]:
                help_string += i
        except BaseException:
            try:
                for u in CMD_HELP[plugin_name]:
                    help_string = (
                        f"Plugin Name-{plugin_name}\n\n‚úò Commands Available-\n\n"
                    )
                    help_string += str(CMD_HELP[plugin_name])
            except BaseException:
                try:
                    if plugin_name in LIST:
                        help_string = (
                            f"Plugin Name-{plugin_name}\n\n‚úò Commands Available-\n\n"
                        )
                        for d in LIST[plugin_name]:
                            help_string += Var.HNDLR + d
                            help_string += "\n"
                except BaseException:
                    pass
        if help_string == "":
            reply_pop_up_alert = "{} has no detailed help...".format(plugin_name)
        else:
            reply_pop_up_alert = help_string
        reply_pop_up_alert += "\n¬© @TheUltroid"
        try:
            if event.query.user_id in sed:
                await event.edit(
                    reply_pop_up_alert,
                    buttons=[
                        Button.inline("<- B·¥Ä·¥Ñ·¥ã", data="buck"),
                        Button.inline("‚Ä¢‚Ä¢C ü·¥èÍú±·¥á‚Ä¢‚Ä¢", data="close"),
                    ],
                )
            else:
                reply_pop_up_alert = notmine
                await event.answer(reply_pop_up_alert, cache_time=0)
        except BaseException:
            halps = "Do .help {} to get the list of commands.".format(plugin_name)
            await event.edit(halps)


def paginate_help(page_number, loaded_plugins, prefix):
    number_of_rows = 5
    number_of_cols = 2
    multi = os.environ.get("EMOJI_TO_DESPLAY_IN_HELP", "‚úò")
    mult2i = os.environ.get("EMOJI2_TO_DESPLAY_IN_HELP", "‚úò")
    helpable_plugins = []
    for p in loaded_plugins:
        if not p.startswith("_"):
            helpable_plugins.append(p)
    helpable_plugins = sorted(helpable_plugins)
    modules = [
        Button.inline(
            "{} {} {}".format(
                random.choice(list(multi)), x, random.choice(list(mult2i))
            ),
            data="us_plugin_{}".format(x),
        )
        for x in helpable_plugins
    ]
    pairs = list(zip(modules[::number_of_cols], modules[1::number_of_cols]))
    if len(modules) % number_of_cols == 1:
        pairs.append((modules[-1],))
    max_num_pages = ceil(len(pairs) / number_of_rows)
    modulo_page = page_number % max_num_pages
    if len(pairs) > number_of_rows:
        pairs = pairs[
            modulo_page * number_of_rows : number_of_rows * (modulo_page + 1)
        ] + [
            (
                Button.inline(
                    "<- P Ä·¥á·¥†…™·¥è·¥ús", data="{}_prev({})".format(prefix, modulo_page)
                ),
                Button.inline("-B·¥Ä·¥Ñ·¥ã-", data="open"),
                Button.inline(
                    "N·¥áx·¥õ ->", data="{}_next({})".format(prefix, modulo_page)
                ),
            )
        ]
    return pairs


def paginate_addon(page_number, loaded_plugins, prefix):
    number_of_rows = 5
    number_of_cols = 2
    multi = os.environ.get("EMOJI_TO_DESPLAY_IN_HELP", "‚úò")
    mult2i = os.environ.get("EMOJI2_TO_DESPLAY_IN_HELP", "‚úò")
    helpable_plugins = []
    for p in loaded_plugins:
        if not p.startswith("_"):
            helpable_plugins.append(p)
    helpable_plugins = sorted(helpable_plugins)
    modules = [
        Button.inline(
            "{} {} {}".format(
                random.choice(list(multi)), x, random.choice(list(mult2i))
            ),
            data="add_plugin_{}".format(x),
        )
        for x in helpable_plugins
    ]
    pairs = list(zip(modules[::number_of_cols], modules[1::number_of_cols]))
    if len(modules) % number_of_cols == 1:
        pairs.append((modules[-1],))
    max_num_pages = ceil(len(pairs) / number_of_rows)
    modulo_page = page_number % max_num_pages
    if len(pairs) > number_of_rows:
        pairs = pairs[
            modulo_page * number_of_rows : number_of_rows * (modulo_page + 1)
        ] + [
            (
                Button.inline(
                    "<- P Ä·¥á·¥†…™·¥è·¥ús", data="{}_prev({})".format(prefix, modulo_page)
                ),
                Button.inline("-B·¥Ä·¥Ñ·¥ã-", data="open"),
                Button.inline(
                    "N·¥áx·¥õ ->", data="{}_next({})".format(prefix, modulo_page)
                ),
            )
        ]
    return pairs
